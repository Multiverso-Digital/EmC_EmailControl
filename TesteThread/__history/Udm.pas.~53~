unit Udm;

interface

uses
  SysUtils, Classes, IdMessage, IdAntiFreezeBase, IdAntiFreeze, IdBaseComponent,
  IdComponent, IdTCPConnection, IdTCPClient, IdExplicitTLSClientServerBase,
  IdMessageClient, IdPOP3, DB, MemDS, DBAccess, MyAccess,
  IdSchedulerOfThreadDefault, IdScheduler, IdSchedulerOfThread,
  IdSchedulerOfThreadPool, IdThreadComponent, Wwdatsrc, DBClient, funcoes,  Graphics, Controls, Forms, Dialogs, StdCtrls, ADODB,
  Provider, MyEmbConnection;



type
  TDM = class(TDataModule)
    POP: TIdPOP3;
    IdAntiFreeze1: TIdAntiFreeze;
    MSG: TIdMessage;
    IDT: TIdThreadComponent;
    IdPool: TIdSchedulerOfThreadPool;
    DataSource1: TDataSource;
    Tmem: TMyQuery;
    TmemID: TLargeintField;
    TmemDT: TDateTimeField;
    TmemEmail: TWideStringField;
    TmemAssunto: TWideStringField;
    TmemEmitente: TWideStringField;
    TmemTama: TIntegerField;
    TmemDatamens: TDateTimeField;
    TmemCabec: TWideMemoField;
    TmemCorpo: TWideMemoField;
    TmemStatus: TIntegerField;
    TmemFiltrada: TIntegerField;
    TmemListaNegra: TIntegerField;
    TmemFavoritos: TIntegerField;
    TmemFiltroResult: TWideMemoField;
    TmemListaNegraResult: TWideMemoField;
    TmemNumeroMens: TIntegerField;
    TmemExcluida: TIntegerField;
    TmemAnexos: TIntegerField;
    Tmemselecionada: TIntegerField;
    TmemConta: TWideStringField;
    TmemMsgId: TWideStringField;
    TmemIsBodyEmpty: TBooleanField;
    TmemUID: TWideStringField;
    TmemIsMsgSinglePartMime: TBooleanField;
    TmemAttachmentEncoding: TWideStringField;
    TmemCharSet: TWideStringField;
    TmemContentType: TWideStringField;
    TmemContentTransferEncoding: TWideStringField;
    TmemContentDisposition: TWideStringField;
    TmemNoEncode: TBooleanField;
    TmemNoDecode: TBooleanField;
    TmemOrganization: TWideStringField;
    TmemDataOrig: TWideStringField;
    TmemXmailer: TWideStringField;
    TmemReplayTO: TWideStringField;
    TmemReturnPath: TWideStringField;
    TmemFromOrig: TWideStringField;
    TmemToOrig: TWideStringField;
    TmemCCOrig: TWideMemoField;
    TmemBCCOrig: TWideMemoField;
    TmemReceivedFrom: TWideStringField;
    TmemFriendResult: TWideMemoField;
    TmemEmailFrom: TWideStringField;
    TmemDominioFrom: TWideStringField;
    TmemIPSender: TWideStringField;
    TmemID_Conta: TIntegerField;
    TmemAnexosFiles: TWideMemoField;
    TmemCountry: TWideStringField;
    Tmemlida: TIntegerField;
    qdns: TMyQuery;
    qdnsactive: TIntegerField;
    qdnsName: TWideStringField;
    qdnsdns: TWideStringField;
    qdnsID: TIntegerField;
    ds_Qdns: TDataSource;
    qVePais: TMyQuery;
    qVePaissigla: TWideStringField;
    qVePaisPAIS: TWideStringField;
    qVePaisID: TIntegerField;
    qVePaisIPNUMFROM: TLargeintField;
    qVePaisIPNUMTO: TLargeintField;
    MC: TMyEmbConnection;
    procedure DataModuleCreate(Sender: TObject);
  private

    { Private declarations }
  public
    { Public declarations }
    function VePais(NUME: Cardinal): string;
    Function Filtrar_Favoritos_ListaNegra(Mens:TMSG):TMSG;

  end;

var
  DM: TDM;

implementation

{$R *.dfm}




procedure TDM.DataModuleCreate(Sender: TObject);
begin
  //tpais.CopyTable(tpais.TableName,'MEMORY');
  //tboxes.CopyTable(tboxes.TableName,'MEMORY');

end;

Function TDM.VePais(NUME:Cardinal):string;
var
  query : TMyQuery;
  Cone  : TMyConnection;
begin

  query := TMyQuery.Create(nil);
  //query.DatabaseName := 'MEMORY';
  //query.SessionName  := 'ABSSession1_1';
  query.SQL.Text     := 'SELECT * FROM pais where :num between IPNUMFROM and IPNUMTO';

  if query.Active then query.Active := false;
  query.Params[0].Asinteger := Nume;
  query.Active := true;

  if query.recordcount > 0 then
     result := query.FieldByName('PAIS').AsString+'_.'+query.FieldByName('sigla').AsString
     else
     result := 'Não achou '+inttostr(NUME);

 query.Free;
 end;


{
Function TDM.Filtrar_Favoritos_ListaNegra(Mens:TMSG):TMSG;
Var
DM_Favo     : TDM_FavoNegra;
VeriEmailT  : TABSQuery;
begin


VeriEmailT := TABSQuery.Create(nil);
VeriEmailT.SQL.Text       := 'SELECT allboxes.ID, allboxes.TypeBox, allboxes.Kind, allboxes.Expression FROM  allboxes where allboxes.TypeBox    < 3 and allboxes.Kind       > 3 and allboxes.`Status`   = 0 and allboxes.Expression = :exp';
VeriEmailT.Databasename   := dm_server.Cone_Favo.DatabaseName;
VeriEmailT.SessionName    := dm_server.SessaoSetup.SessionName;


//DM_Favo := TDM_FavoNegra.Create(nil);

Result := Mens;


with dm_favo do
begin

if VeriEmailT.active then  VeriEmailT.active := false;
VeriEmailT.params[0].AsString := Mens.EmailFrom;
VeriEmailT.active := true;


//if VeriEmail.Locate('Expression',Mens.EmailFrom,[loCaseInsensitive]) then
//begin

 if VeriEmailT.FieldByName('TypeBox').AsInteger = 1 then
   begin
   Mens.FiltroResultado.Add('Email found in My Friends:'+Mens.EmailFrom);
   Mens.Filtrada     := 144;
   Mens.Favorita     := 1;
   Mens.Selecionada  := 0;
   result := Mens;
   VeriEmailT.Free;
   //DM_Favo.Free;

   exit;
   end;

  if VeriEmailT.FieldByName('TypeBox').AsInteger = 2 then
   begin
   Mens.FiltroResultado.Add('Email found in BlackList: '+Mens.EmailFrom);
   Mens.Filtrada     := 5;
   Mens.ListaNegra   := 1;
   Mens.Selecionada  := 1;
   result := Mens;
   VeriEmailT.Free;
   //DM_Favo.Free;
   exit;
   end;

//end;


if VeriEmailT.active then  VeriEmailT.active := false;
VeriEmailT.params[0].AsString := Mens.DominioFrom;
VeriEmailT.active := true;


//if VeriEmail.Locate('Expression',Mens.DominioFrom,[loCaseInsensitive]) then
//begin

  if VeriEmailT.FieldByName('TypeBox').AsInteger = 1 then
   begin
   Mens.FiltroResultado.Add('Domain found in My Friends List: '+Mens.DominioFrom);
   Mens.Filtrada     := 144;
   Mens.Favorita     := 1;
   Mens.Selecionada  := 0;
   result := Mens;
   VeriEmailT.Free;
   //DM_Favo.Free;
   exit;
   end;

  if VeriEmailT.FieldByName('TypeBox').AsInteger = 2 then
   begin
   Mens.FiltroResultado.Add('Domain found in BlackList: '+Mens.DominioFrom);
   Mens.Filtrada     := 5;
   Mens.ListaNegra   := 1;
   Mens.Selecionada  := 1;
   result := Mens;
   VeriEmailT.Free;
   //DM_Favo.Free;
   exit;
   end;

//end;

VeriEmailT.Free;

end;


end;
    }

end.
