unit Udm;

interface

uses
  SysUtils, Classes, IdMessage, IdAntiFreezeBase, IdAntiFreeze, IdBaseComponent,
  IdComponent, IdTCPConnection, IdTCPClient, IdExplicitTLSClientServerBase,
  IdMessageClient, IdPOP3, DB, MemDS, DBAccess, MyAccess,
  IdSchedulerOfThreadDefault, IdScheduler, IdSchedulerOfThread,
  IdSchedulerOfThreadPool, IdThreadComponent, Wwdatsrc,


   DBClient, funcoes,  Graphics, Controls, Forms, Dialogs, StdCtrls, ADODB,
  ABSMain, Provider;



type
  TDM = class(TDataModule)
    MC: TMyConnection;
    POP: TIdPOP3;
    IdAntiFreeze1: TIdAntiFreeze;
    MSG: TIdMessage;
    IDT: TIdThreadComponent;
    IdPool: TIdSchedulerOfThreadPool;
    DataSource1: TDataSource;
    Tmem: TMyQuery;
    TmemID: TLargeintField;
    TmemDT: TDateTimeField;
    TmemEmail: TWideStringField;
    TmemAssunto: TWideStringField;
    TmemEmitente: TWideStringField;
    TmemTama: TIntegerField;
    TmemDatamens: TDateTimeField;
    TmemCabec: TWideMemoField;
    TmemCorpo: TWideMemoField;
    TmemStatus: TIntegerField;
    TmemFiltrada: TIntegerField;
    TmemListaNegra: TIntegerField;
    TmemFavoritos: TIntegerField;
    TmemFiltroResult: TWideMemoField;
    TmemListaNegraResult: TWideMemoField;
    TmemNumeroMens: TIntegerField;
    TmemExcluida: TIntegerField;
    TmemAnexos: TIntegerField;
    Tmemselecionada: TIntegerField;
    TmemConta: TWideStringField;
    TmemMsgId: TWideStringField;
    TmemIsBodyEmpty: TBooleanField;
    TmemUID: TWideStringField;
    TmemIsMsgSinglePartMime: TBooleanField;
    TmemAttachmentEncoding: TWideStringField;
    TmemCharSet: TWideStringField;
    TmemContentType: TWideStringField;
    TmemContentTransferEncoding: TWideStringField;
    TmemContentDisposition: TWideStringField;
    TmemNoEncode: TBooleanField;
    TmemNoDecode: TBooleanField;
    TmemOrganization: TWideStringField;
    TmemDataOrig: TWideStringField;
    TmemXmailer: TWideStringField;
    TmemReplayTO: TWideStringField;
    TmemReturnPath: TWideStringField;
    TmemFromOrig: TWideStringField;
    TmemToOrig: TWideStringField;
    TmemCCOrig: TWideMemoField;
    TmemBCCOrig: TWideMemoField;
    TmemReceivedFrom: TWideStringField;
    TmemFriendResult: TWideMemoField;
    TmemEmailFrom: TWideStringField;
    TmemDominioFrom: TWideStringField;
    TmemIPSender: TWideStringField;
    TmemID_Conta: TIntegerField;
    TmemAnexosFiles: TWideMemoField;
    TmemCountry: TWideStringField;
    Tmemlida: TIntegerField;
    qdns: TMyQuery;
    qdnsactive: TIntegerField;
    qdnsName: TWideStringField;
    qdnsdns: TWideStringField;
    qdnsID: TIntegerField;
    ds_Qdns: TDataSource;
    qVePaisX: TMyQuery;
    qVePaisXsigla: TWideStringField;
    qVePaisXPAIS: TWideStringField;
    qVePaisXID: TIntegerField;
    qVePaisXIPNUMFROM: TLargeintField;
    qVePaisXIPNUMTO: TLargeintField;
    ABSSession1: TABSSession;
    ABSDatabase1: TABSDatabase;
    qvepais: TABSQuery;
    qvepaissigla: TStringField;
    qvepaisPAIS: TStringField;
    qvepaisID: TIntegerField;
    qvepaisIPNUMFROM: TFloatField;
    qvepaisIPNUMTO: TFloatField;
    Tpais: TABSTable;
    procedure DataModuleCreate(Sender: TObject);
  private

    { Private declarations }
  public
    { Public declarations }
    function VePais(NUME: Cardinal): string;
  end;

var
  DM: TDM;

implementation

{$R *.dfm}




procedure TDM.DataModuleCreate(Sender: TObject);
begin


  tpais.CopyTable(tpais.TableName,'MEMORY');

end;

Function TDM.VePais(NUME:Cardinal):string;
var
  query : TABSQuery;
  Cone  : TABSDatabase;
begin



  if qvepais.Active then qvepais.Active := false;
  qvepais.Params[0].Asinteger := Nume;
  qvepais.Active := true;

  if qvepais.recordcount > 0 then
     result := qvepais.FieldByName('PAIS').AsString+'_.'+qvepais.FieldByName('sigla').AsString
     else
     result := 'Não achou '+inttostr(NUME);

exit;








  query := TABSQuery.Create(nil);
  query.DatabaseName := 'MEMORY';
  query.SessionName  :='ABSSession1_1';
  query.SQL.Text     := 'SELECT * FROM pais where :num between IPNUMFROM and IPNUMTO';

  if query.Active then query.Active := false;
  query.Params[0].Asinteger := Nume;
  query.Active := true;

  if query.recordcount > 0 then
     result := query.FieldByName('PAIS').AsString+'_.'+query.FieldByName('sigla').AsString
     else
     result := 'Não achou '+inttostr(NUME);

 query.Free;


end;

end.
