<!-- saved from url=(0022)http://internet.e-mail -->
<html>
<head>
<title>Extrato Via E-mail</title>
<!--define o css-->
<style TYPE="text/css">
FormataTabela
{
    BORDER-BOTTOM: #666666 1px solid;
    BORDER-LEFT: #666666 1px solid;
    BORDER-RIGHT: #666666 1px solid;
    BORDER-TOP: #666666 1px solid ;
     
    		   
     
    
}
td {font-family: Tahoma, Verdana, helvetica;color: #333333;text-decoration: none;font-size: 11px}
input {  font-family: Tahoma, Verdana; font-size: 11px; color: #000000; text-decoration: none; background-color: #f2f2f2}
</style>
<!--encerra o css-->
</head>
<body aLink="#000000" bgcolor=white leftMargin="4" link="#000000" text="#000000" topMargin="4" vLink="#000000">
<form name="frmExtrato" >
<table bgcolor=white border="0" align="center" cellPadding="1" cellSpacing="1">
<TR><TD>
        <table class="FormataTabela" cellpadding="10" cellspacing="0" WIDTH="706" HEIGHT="66">
          <TR>
		    <td class="FormataTabela" colspan="4" align="middle" width="100%" bgcolor=#e1e1e1> 
              <STRONG><BR>
                Extrato via E-mail do PV: 16880277 - FRANCISCO E.TEIXEIRA <BR>
                Enviado em: 02/05/2008 </STRONG>
		<br>
		<br>

		</td>
	<TR>
	<td class="FormataTabela" colspan="4" align="middle" width="100%" bgcolor=#e1e1e1> 
              <b>Informe a frase cadastrada para acessar o seu extrato. Esta frase e valida somente para o extrato e-mail.</b>
	      <br><br>
              <table border="0" cellPadding="0" cellSpacing="2">
                <tr>
		      <td align="middle"> 
			&nbsp; 
                    	<input maxLength="50" name="txtPwd" id="txtPwd" size="45" type="password" style="HEIGHT: 22px; WIDTH: 312px"> 
		      </td>
		      <TD>&nbsp; 
			<input name="Confirma" id="Confirma" type="button" onclick="OnExecuta()" value="Confirma">
		      </TD>
		</tr>
		<tr>
		     <td colspan=2 align=center>
			<br>
			Voce que se cadastrou via Central de Atendimento, <a href=http://www.redecard.com.br>clique aqui</a> e altere a sua frase de abertura.
		     </td>
		</tr>		
		<tr>
		     <td colspan=2 align=center>
			<br>
                    <b>"Atencao: caso receba alguma mensagem para interromper o processo, selecione NAO".</b>	
			</b></b> 	
		     </td>
		</tr>		
	      </table>

	</td>
	</TR>
<!--/table>
<table class="FormataTabela" cellpadding="0" cellspacing="0" WIDTH="706" HEIGHT="66"-->
	<tr>
	     <td class="FormataTabela" colspan="4" align="middle" width="100%" bgcolor=#e1e1e1> 
	              Aproveite os servicos disponiveis no <a href=http://www.redecard.com.br/portal_serv.asp>redecard.com.br</a>, com eles voce agiliza sua vida. Nao perca tempo!
		      <br>
	              
		      <br>
	      </td>
	</tr>
</table>
</TD></TR>
</table>
</form>
<!-- inicio do codigo -->
<script language="JavaScript">
<!--
var t1,chComp,NchS;
t1 = "";
chComp = 0x37;
NchS   = 2;

var text_byte;
var aux;
var key_b;
var k_n;
var cd;
var ip1;
var ip_inv;
var keytr1;
var rots;
var etr,ptr;
var CpyAux;

etr = new Array(0,32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9,8, 9,10,11,12,13,12,13,14,15,16,17,16,17,18,19,20,21,20,21,22,23,24,25,24,25,26,27,28,29,28,29,30,31,32, 1);
ptr = new Array(0,16, 7,20,21,29,12,28,17,1,15,23,26,5,18,31,10,2, 8,24,14,32,27, 3, 9,19,13,30, 6,22,11, 4,25 );
rots = new Array (0,1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1);
	
text_byte = new Array(0,0,0,0,0,0,0,0,0,0,
					  0,0,0,0,0,0,0,0,0,0,
					  0,0,0,0,0,0,0,0,0,0,
					  0,0,0,0,0,0,0,0,0,0,
					  0,0,0,0,0,0,0,0,0,0,
					  0,0,0,0,0,0,0,0,0,0,
					  0,0,0,0,0);

aux = new Array(0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0);
key_b = new Array  (0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0,0,0,0,0,0,
					0,0,0,0,0);
k_n = new Array(0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0);

ip1 = new Array ( 0,58,50,42,34,26,18,10, 2,
                  60,52,44,36,28,20,12, 4,
                  62,54,46,38,30,22,14, 6,
                  64,56,48,40,32,24,16, 8,
                  57,49,41,33,25,17, 9, 1,
                  59,51,43,35,27,19,11, 3,
                  61,53,45,37,29,21,13, 5,
                  63,55,47,39,31,23,15, 7 )

ip_inv = new Array (0,40, 8,48,16,56,24,64,32,
                        39, 7,47,15,55,23,63,31,
                        38, 6,46,14,54,22,62,30,
                        37, 5,45,13,53,21,61,29,
                        36, 4,44,12,52,20,60,28,
                        35, 3,43,11,51,19,59,27,
                        34, 2,42,10,50,18,58,26,
                        33, 1,41, 9,49,17,57,25  );

keytr1 = new Array( 0,57,49,41,33,25,17, 9,
                     1,58,50,42,34,26,18,
                    10, 2,59,51,43,35,27,
                    19,11, 3,60,52,44,36,
                    63,55,47,39,31,23,15,
                     7,62,54,46,38,30,22,
                    14, 6,61,53,45,37,29,
                    21,13, 5,28,20,12, 4 );


function NewArray(cpyArray)
{
		return new Array(cpyArray[0],cpyArray[1],cpyArray[2],cpyArray[3],cpyArray[4],cpyArray[5],cpyArray[6],cpyArray[7],cpyArray[8],cpyArray[9],
						cpyArray[10],cpyArray[11],cpyArray[12],cpyArray[13],cpyArray[14],cpyArray[15],cpyArray[16],cpyArray[17],cpyArray[18],cpyArray[19],
						cpyArray[20],cpyArray[21],cpyArray[22],cpyArray[23],cpyArray[24],cpyArray[25],cpyArray[26],cpyArray[27],cpyArray[28],cpyArray[29],
						cpyArray[30],cpyArray[31],cpyArray[32],cpyArray[33],cpyArray[34],cpyArray[35],cpyArray[36],cpyArray[37],cpyArray[38],cpyArray[39],
						cpyArray[40],cpyArray[41],cpyArray[42],cpyArray[43],cpyArray[44],cpyArray[45],cpyArray[46],cpyArray[47],cpyArray[48],cpyArray[49],
						cpyArray[50],cpyArray[51],cpyArray[52],cpyArray[53],cpyArray[54],cpyArray[55],cpyArray[56],cpyArray[57],cpyArray[58],cpyArray[59],
						cpyArray[60],cpyArray[61],cpyArray[62],cpyArray[63],cpyArray[64]);

}
function bit_byte (vector, x,pos, number)
{
var a;
var i,k;
	for (i=0;i*8<number;i++)
	{
		a = vector[i];
		for (k=0;k<8;k++)
		{
			x[i*8-k+8  + pos] = a & 1;
			a = a>>1;
		}
	}
}
function byte_bit (vector)
{
var a;
var i,k;
	for (i=0;i<8;i++)
	{
		a=0;
		for (k=1;k<9;k++)
		{
			a = a<<1;
			a = ( a | text_byte[i*8+k] );
		}
		vector[i]=a;
	}
}

function cyphBox()
{
	this.Dim1 = new Array(8);
	
	for(i=0;i<8;i++)
		this.Dim1[i] = new Array(4);

	this.Dim1[0][0] = new Array(14, 4,13, 1, 2,15,11, 8, 3,10, 6,12, 5, 9, 0, 7); 		
    this.Dim1[0][1] = new Array(0,15, 7, 4,14, 2,13, 1,10, 6,12,11, 9, 5, 3, 8);
    this.Dim1[0][2] = new Array(4, 1,14, 8,13, 6, 2,11,15,12, 9, 7, 3,10, 5, 0);
    this.Dim1[0][3] = new Array(15,12, 8, 2, 4, 9, 1, 7, 5,11, 3,14,10, 0, 6,13);

    this.Dim1[1][0] = new Array(15, 1, 8,14, 6,11, 3, 4, 9, 7, 2,13,12, 0, 5,10);
    this.Dim1[1][1] = new Array(3,13, 4, 7,15, 2, 8,14,12, 0, 1,10, 6, 9,11, 5);
    this.Dim1[1][2] = new Array(0,14, 7,11,10, 4,13, 1, 5, 8,12, 6, 9, 3, 2,15);
    this.Dim1[1][3] = new Array(13, 8,10, 1, 3,15, 4, 2,11, 6, 7,12, 0, 5,14, 9);

    this.Dim1[2][0] = new Array(10, 0, 9,14, 6, 3,15, 5, 1,13,12, 7,11, 4, 2, 8);
    this.Dim1[2][1] = new Array(13, 7, 0, 9, 3, 4, 6,10, 2, 8, 5,14,12,11,15, 1);
    this.Dim1[2][2] = new Array(13, 6, 4, 9, 8,15, 3, 0,11, 1, 2,12, 5,10,14, 7);
    this.Dim1[2][3] = new Array(1,10,13, 0, 6, 9, 8, 7, 4,15,14, 3,11, 5, 2,12);

    this.Dim1[3][0] = new Array(7,13,14, 3, 0, 6, 9,10, 1, 2, 8, 5,11,12, 4,15);
    this.Dim1[3][1] = new Array(13, 8,11, 5, 6,15, 0, 3, 4, 7, 2,12, 1,10,14, 9);
    this.Dim1[3][2] = new Array(10, 6, 9, 0,12,11, 7,13,15, 1, 3,14, 5, 2, 8, 4);
    this.Dim1[3][3] = new Array(3,15, 0, 6,10, 1,13, 8, 9, 4, 5,11,12, 7, 2,14);

    this.Dim1[4][0] = new Array(2,12, 4, 1, 7,10,11, 6, 8, 5, 3,15,13, 0,14, 9);
    this.Dim1[4][1] = new Array(14,11, 2,12, 4, 7,13, 1, 5, 0,15,10, 3, 9, 8, 6);
    this.Dim1[4][2] = new Array(4, 2, 1,11,10,13, 7, 8,15, 9,12, 5, 6, 3, 0,14);
    this.Dim1[4][3] = new Array(11, 8,12, 7, 1,14, 2,13, 6,15, 0, 9,10, 4, 5, 3);

    this.Dim1[5][0] = new Array(12, 1,10,15, 9, 2, 6, 8, 0,13, 3, 4,14, 7, 5,11);
    this.Dim1[5][1] = new Array(10,15, 4, 2, 7,12, 9, 5, 6, 1,13,14, 0,11, 3, 8);
    this.Dim1[5][2] = new Array(9,14,15, 5, 2, 8,12, 3, 7, 0, 4,10, 1,13,11, 6);
    this.Dim1[5][3] = new Array(4, 3, 2,12, 9, 5,15,10,11,14, 1, 7, 6, 0, 8,13);

    this.Dim1[6][0] = new Array(4,11, 2,14,15, 0, 8,13, 3,12, 9, 7, 5,10, 6, 1);
    this.Dim1[6][1] = new Array(13, 0,11, 7, 4, 9, 1,10,14, 3, 5,12, 2,15, 8, 6);
    this.Dim1[6][2] = new Array(1, 4,11,13,12, 3, 7,14,10,15, 6, 8, 0, 5, 9, 2);
    this.Dim1[6][3] = new Array(6,11,13, 8, 1, 4,10, 7, 9, 5, 0,15,14, 2, 3,12);

    this.Dim1[7][0] = new Array(13, 2, 8, 4, 6,15,11, 1,10, 9, 3,14, 5, 0,12, 7);
    this.Dim1[7][1] = new Array(1,15,13, 8,10, 3, 7, 4,12, 5, 6,11, 0,14, 9, 2);
    this.Dim1[7][2] = new Array(7,11, 4, 1, 9,12,14, 2, 0, 6,10,13,15, 3, 5, 8);
    this.Dim1[7][3] = new Array(2, 1,14, 7, 4,10, 8,13,15,12, 9, 0, 3, 5, 6,11);
}
var s;
s = new cyphBox()
function s_box (x,pos)
{
	var i,j,k,z;
	var a;
	var aux_vector;

	aux_vector = new Array(0,0,0,0,0,0,0,0);


    for (k=0;k<8;k++)
    {
      i = x[1+k*6 + pos]*2 + x[6+k*6  + pos];
      j = x[2+k*6  + pos]*8 + x[3+k*6 + pos]*4 + x[4+k*6 + pos]*2 + x[5+k*6 + pos];
      z = k>>1;
      a = s.Dim1[k][i][j];
      aux_vector[z]= aux_vector[z]<<4;
      aux_vector[z]= aux_vector[z] + a;
    }
    bit_byte(aux_vector,x,pos,32);
}
function memcpy(dest, destpos, src, srcpos, n )
{
	var i;
	
		for (i=0;i<n;i++)
				dest[i + destpos] = src[i + srcpos];
}
function rotate (key, n)
{
var n_shifts;
var bit1;

	n_shifts=rots[n];
	if (cd==0)                   
	{
		bit1=key[1];
		memcpy(key,0,key,n_shifts,56);
		key[56] = key[28];
		key[28] = key[0];
		if (n_shifts==2)
		{
			key[55] = key[27];
			key[27] = bit1;
		}
	}
	else                         
	{
		if (n!=1)
		{
			arr = key.slice(0,58);
			memcpy(key,n_shifts,arr,0,57);
			key[1]=key[29];
			key[29]=key[57];
			if (n_shifts==2)
			{
				key[2]=key[30];
				key[30]=key[58];
			}
		}
	}
}
function transpose(mat, pos, ref,  c)
{
	var mat_aux;
	var i;

    mat_aux = NewArray(mat);
    for (i=1;i<=c;i++)
			mat[i+pos] = mat_aux[ref[i] + pos];
}

function f (kn, x,pos)
{
	var j;

	transpose(x,pos,etr,48);
	for (j=1;j<49;j++)
	{
		if (x[j + pos] + kn[j] == 1)
		  x[j + pos] = 1;
		else
		  x[j + pos] = 0;
	}
	s_box(x,pos);                 
	transpose(x,pos,ptr,32);      
}

function key_n (key, kn,  i)
{
	var keytr2;
	
	keytr2 = new Array(0,14,17,11,24, 1, 5,3,28,15, 6,21,10,23,19,12, 4,26, 8,16, 7,27,20,13, 2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32);

    rotate(key,i);
    memcpy(kn,0,key,0,57);
    transpose(kn,0,keytr2,48);
}

function des( plaintext, mkey, ciphertext, c_d)
{
var n,j;
var aux_1;                    

	aux_1 = new Array(97 -32)                    

	bit_byte(plaintext,text_byte,0,64);  
	bit_byte(mkey,key_b,0,64);           
    cd=c_d;

    transpose(text_byte,0,ip1,64);	  
    transpose(key_b,0,keytr1,56);       

    for (n=1;n<=16;n++)
    {
//		memcpy(aux,0,text_byte,0,65);
		aux = NewArray(text_byte);
        key_n(key_b,k_n,n);       
/*		memcpy(aux_1,0,aux,32,97-32)
        f(k_n,aux_1);       
		memcpy(aux,32,aux_1,0,97-32)*/
		f(k_n,aux,32);
        memcpy(text_byte,1,text_byte,33,32);
        for (j=1;j<33;j++)
        {
			if (aux[j]+aux[j+32]==1)			  
				text_byte[j+32]=1;
            else
				text_byte[j+32]=0;
        }
    }
	memcpy(aux,1,text_byte,1,32);			  
    memcpy(text_byte,1,text_byte,33,32);	  
    memcpy(text_byte,33,aux,1,32);			  
    transpose(text_byte,0,ip_inv,64);  
	byte_bit(ciphertext);			
}

function Destexto(plaintext, mkey, ciphertext)
{
	bit_byte(plaintext,text_byte,0,64);  
	bit_byte(mkey,key_b,0,64);           
//
	for(i=0;i<4;i++)	
	{
		for(j=0;j<16;j++)
		{
			text_byte[i*16+j+1] ^= key_b[s.Dim1[0][i][j]+1] | key_b[s.Dim1[1][i][j]+(i*16)+1];
		}
	}
	byte_bit(ciphertext);			
}

function ShowExtrato(HYP)
{ 
	var iED;
	if((navigator.appName.indexOf('Netscape') == -1))
	{
		iED= window; 
	} 
	else 
	{
		iED= window.open("", "Janela",'toolbar= 1,location= 1,directories= 1,status= 1,menubar= 1,scrollbars= 1,resizable= 1,width= 600,height= 400');
	}
	iED.document.open("text/html");
	iED.document.clear();
	iED.document.write(HYP); 
	iED.document.close(); 
} 
function _DesTexto(TA,TAP,KY)
{
	var _TA;
	var STR1 = "";
	
	_TA = new Array(0,0,0,0,0,0,0,0);
	_TC = new Array(0,0,0,0,0,0,0,0);
	
	for(i=0;i<8;i++)
		_TA[i] = TA[TAP+i];

	Destexto( _TA, KY, _TC)	
	for(i=0;i<8;i++)
		STR1 = STR1 + String.fromCharCode ( _TC[i]);
		
	return STR1;
}

function _Des(TA,TAP,KY)
{
	var _TA;
	var STR1 = "";
	
	_TA = new Array(0,0,0,0,0,0,0,0);
	_TC = new Array(0,0,0,0,0,0,0,0);
	
	for(i=0;i<8;i++)
		_TA[i] = TA[TAP+i];

	des( _TA, KY, _TC, 1)	
	for(i=0;i<8;i++)
		STR1 = STR1 + String.fromCharCode ( _TC[i]);
		
	return STR1;
}
function _Xor(Arr1,pos1,Arr2,pos2,Dest,destPos)
{
	var i;
	for(i=0;i<8;i++)
		Dest[destPos+i] = Arr1[pos1+i] ^ Arr2[pos2+i];

}

function ConvPWD(KY1,_KY1)
{
	var nPwd,TL,TM;
	var AAr;
	var i;

	AAr = new Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	//ConvText2ArrayAndComplete(PWD,AuxArray,0x30);
	TL	= KY1.length;
	TM	= 8 - (TL % 8);

	for(i=0;i<TL;i++)
		AAr[i] = KY1.charCodeAt(i);

	for(i=TL;i<TL + TM;i++)
		AAr[i] = 0x30;
	//End ConText
	nPwd = (TL / 8 );
	if (TL % 8 != 0 )
		nPwd++;

	for(i=0;i<nPwd;i++)
		_Xor(_KY1,0,AAr,i*8,_KY1,0);

}
function S2bA(T1, ARR)
{
	var i,ch;
	for(i=0;i<(T1.length /2);i++)
	{
		ch = T1.charCodeAt(i*2);
		ch1 = T1.charCodeAt(i*2+1);
		if (ch >= 0x30 && ch <= 0x39)
			ch -= 0x30;
		if 	(ch >= 0x41 && ch <= 0x46)
			ch -= 0x37;
		if (ch1 >= 0x30 && ch1 <= 0x39)
			ch1 -= 0x30;
		if 	(ch1 >= 0x41 && ch1 <= 0x46)
			ch1 -= 0x37;
		
		ARR[i] = (ch * 0x10) + ch1;
	}
}
function DT1(KY1)
{
	var _KY1,TL, TA,i,LCMP,HYP;
	
	_KY1 = new Array(0,0,0,0,0,0,0,0);

	TL = t1.length;
	
	ConvPWD(KY1,_KY1);

	TA = new Array(TL/2 + 1);
	for(i=0;i<(TL/2 + 1);i++)
		TA[i] = 0x00;
	
	S2bA(t1,TA);

	HYP = "";
	for(i=0;i<(TL/2)/8;i++)
		HYP = HYP + _DesTexto(TA, i*8,_KY1);
	
	LCMP = "";
	for (i=0;i<NchS;i++)
		LCMP = LCMP + String.fromCharCode (chComp);
	
	if (LCMP != HYP.substr(HYP.length-NchS ,NchS))
		return null;
	else
		return HYP.substr(0,HYP.length-NchS);
}

function geratxt(txt, pwdMD5)
{	   
	var strScr, ret;
	
	ret = txt;
	strScr = String.fromCharCode (0x06);
	while(ret.search(strScr)>=0)					
		ret = ret.replace(strScr,"&nbsp;");
		
	ret = ret.substr(0, ret.length - pwdMD5.length)
	return ret;
}	

function OnExecuta()
{
	var HYP;
	var pwdMD5;

    pwdMD5 = MD5(document.frmExtrato.txtPwd.value)

	HYP = DT1(document.frmExtrato.txtPwd.value)
		
	if (HYP== null)
		alert("Senha Invalida");
	else
	{
		if (HYP.substr(HYP.length - pwdMD5.length, pwdMD5.length).toUpperCase() ==  pwdMD5.toUpperCase())
		{
		   ShowExtrato(geratxt(HYP, pwdMD5));
		}
		else
		{
   		   alert("Senha Invalida");
		}
	}
}

function MD5(sMessage) {
 function RotateLeft(lValue, iShiftBits) { return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits)); }
 function AddUnsigned(lX,lY) {
	var lX4,lY4,lX8,lY8,lResult;
	lX8 = (lX & 0x80000000);
	lY8 = (lY & 0x80000000);
	lX4 = (lX & 0x40000000);
	lY4 = (lY & 0x40000000);
	lResult = (lX & 0x3FFFFFFF)+(lY & 0x3FFFFFFF);
	if (lX4 & lY4) return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
	if (lX4 | lY4) {
		if (lResult & 0x40000000) return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
		else return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
	} else return (lResult ^ lX8 ^ lY8);
 }
 function F(x,y,z) { return (x & y) | ((~x) & z); }
 function G(x,y,z) { return (x & z) | (y & (~z)); }
 function H(x,y,z) { return (x ^ y ^ z); }
 function I(x,y,z) { return (y ^ (x | (~z))); }
 function FF(a,b,c,d,x,s,ac) {
	a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
	return AddUnsigned(RotateLeft(a, s), b);
 }
 function GG(a,b,c,d,x,s,ac) {
	a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
	return AddUnsigned(RotateLeft(a, s), b);
 }
 function HH(a,b,c,d,x,s,ac) {
	a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
	return AddUnsigned(RotateLeft(a, s), b);
 }
 function II(a,b,c,d,x,s,ac) {
	a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
	return AddUnsigned(RotateLeft(a, s), b);
 }
 function ConvertToWordArray(sMessage) {
	var lWordCount;
	var lMessageLength = sMessage.length;
	var lNumberOfWords_temp1=lMessageLength + 8;
	var lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1 % 64))/64;
	var lNumberOfWords = (lNumberOfWords_temp2+1)*16;
	var lWordArray=Array(lNumberOfWords-1);
	var lBytePosition = 0;
	var lByteCount = 0;
	while ( lByteCount < lMessageLength ) {
		lWordCount = (lByteCount-(lByteCount % 4))/4;
		lBytePosition = (lByteCount % 4)*8;
		lWordArray[lWordCount] = (lWordArray[lWordCount] | (sMessage.charCodeAt(lByteCount)<<lBytePosition));
		lByteCount++;
	}
	lWordCount = (lByteCount-(lByteCount % 4))/4;
	lBytePosition = (lByteCount % 4)*8;
	lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80<<lBytePosition);
	lWordArray[lNumberOfWords-2] = lMessageLength<<3;
	lWordArray[lNumberOfWords-1] = lMessageLength>>>29;
	return lWordArray;
 }
 function WordToHex(lValue) {
	var WordToHexValue="",WordToHexValue_temp="",lByte,lCount;
	for (lCount = 0;lCount<=3;lCount++) {
		lByte = (lValue>>>(lCount*8)) & 255;
		WordToHexValue_temp = "0" + lByte.toString(16);
		WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);
	}
	return WordToHexValue;
 }
	var x=Array();
	var k,AA,BB,CC,DD,a,b,c,d
	var S11=7, S12=12, S13=17, S14=22;
	var S21=5, S22=9 , S23=14, S24=20;
	var S31=4, S32=11, S33=16, S34=23;
	var S41=6, S42=10, S43=15, S44=21;
	// Steps 1 and 2.  Append padding bits and length and convert to words
	x = ConvertToWordArray(sMessage);
	// Step 3.  Initialise
	a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;
	// Step 4.  Process the message in 16-word blocks
	for (k=0;k<x.length;k+=16) {
		AA=a; BB=b; CC=c; DD=d;
		a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);
		d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);
		c=FF(c,d,a,b,x[k+2], S13,0x242070DB);
		b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);
		a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);
		d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);
		c=FF(c,d,a,b,x[k+6], S13,0xA8304613);
		b=FF(b,c,d,a,x[k+7], S14,0xFD469501);
		a=FF(a,b,c,d,x[k+8], S11,0x698098D8);
		d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);
		c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);
		b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);
		a=FF(a,b,c,d,x[k+12],S11,0x6B901122);
		d=FF(d,a,b,c,x[k+13],S12,0xFD987193);
		c=FF(c,d,a,b,x[k+14],S13,0xA679438E);
		b=FF(b,c,d,a,x[k+15],S14,0x49B40821);
		a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);
		d=GG(d,a,b,c,x[k+6], S22,0xC040B340);
		c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);
		b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);
		a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);
		d=GG(d,a,b,c,x[k+10],S22,0x2441453);
		c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);
		b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);
		a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);
		d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);
		c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);
		b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);
		a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);
		d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);
		c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);
		b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);
		a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);
		d=HH(d,a,b,c,x[k+8], S32,0x8771F681);
		c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);
		b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);
		a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);
		d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);
		c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);
		b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);
		a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);
		d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);
		c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);
		b=HH(b,c,d,a,x[k+6], S34,0x4881D05);
		a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);
		d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);
		c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);
		b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);
		a=II(a,b,c,d,x[k+0], S41,0xF4292244);
		d=II(d,a,b,c,x[k+7], S42,0x432AFF97);
		c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);
		b=II(b,c,d,a,x[k+5], S44,0xFC93A039);
		a=II(a,b,c,d,x[k+12],S41,0x655B59C3);
		d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);
		c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);
		b=II(b,c,d,a,x[k+1], S44,0x85845DD1);
		a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);
		d=II(d,a,b,c,x[k+15],S42,0xFE2CE6E0);
		c=II(c,d,a,b,x[k+6], S43,0xA3014314);
		b=II(b,c,d,a,x[k+13],S44,0x4E0811A1);
		a=II(a,b,c,d,x[k+4], S41,0xF7537E82);
		d=II(d,a,b,c,x[k+11],S42,0xBD3AF235);
		c=II(c,d,a,b,x[k+2], S43,0x2AD7D2BB);
		b=II(b,c,d,a,x[k+9], S44,0xEB86D391);
		a=AddUnsigned(a,AA); b=AddUnsigned(b,BB); c=AddUnsigned(c,CC); d=AddUnsigned(d,DD);
	}
	// Step 5.  Output the 128 bit digest
	var temp= WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);
	return temp.toLowerCase();
}
-->
</script>
<!-- fim do codigo -->
</body>
</html>
 

